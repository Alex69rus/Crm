// <auto-generated />
using System;
using Crm.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Crm.Data.Migrations
{
    [DbContext(typeof(CrmDbContext))]
    partial class CrmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("crm")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Crm.Data.Entities.Accounts.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_number");

                    b.Property<DateOnly?>("ClosedDate")
                        .HasColumnType("date")
                        .HasColumnName("closed_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Discretion")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("discretion");

                    b.Property<bool>("Managed")
                        .HasColumnType("boolean")
                        .HasColumnName("managed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("RegistrationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("registration_type");

                    b.Property<DateOnly?>("SetupDate")
                        .HasColumnType("date")
                        .HasColumnName("setup_date");

                    b.Property<string>("ShortName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("short_name");

                    b.Property<string>("SponsorCompany")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sponsor_company");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", "crm");
                });

            modelBuilder.Entity("Crm.Data.Entities.Accounts.AccountBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_at");

                    b.HasKey("Id")
                        .HasName("pk_account_balances");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_account_balances_account_id");

                    b.ToTable("account_balances", "crm");
                });

            modelBuilder.Entity("Crm.Data.Entities.Accounts.AccountOwner", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("text")
                        .HasColumnName("account_id");

                    b.Property<string>("ContactId")
                        .HasColumnType("text")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.HasKey("AccountId", "ContactId")
                        .HasName("pk_account_owners");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_account_owners_contact_id");

                    b.ToTable("account_owners", "crm");
                });

            modelBuilder.Entity("Crm.Data.Entities.Contacts.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Citizenship")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("citizenship");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateOnly?>("DateOfDeath")
                        .HasColumnType("date")
                        .HasColumnName("date_of_death");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NamePrefix")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name_prefix");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.ToTable("contacts", "crm");
                });

            modelBuilder.Entity("Crm.Data.Entities.Contacts.ContactAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("pk_contact_addresses");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_contact_addresses_contact_id");

                    b.ToTable("contact_addresses", "crm");
                });

            modelBuilder.Entity("Crm.Data.Entities.Contacts.ContactPhone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_id");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_contact_phones");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_contact_phones_contact_id");

                    b.ToTable("contact_phones", "crm");
                });

            modelBuilder.Entity("Crm.Data.Entities.Accounts.AccountBalance", b =>
                {
                    b.HasOne("Crm.Data.Entities.Accounts.Account", "Account")
                        .WithOne("Balance")
                        .HasForeignKey("Crm.Data.Entities.Accounts.AccountBalance", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_balances_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Crm.Data.Entities.Accounts.AccountOwner", b =>
                {
                    b.HasOne("Crm.Data.Entities.Accounts.Account", "Account")
                        .WithMany("AccountOwners")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_owners_accounts_account_id");

                    b.HasOne("Crm.Data.Entities.Contacts.Contact", "Contact")
                        .WithMany("AccountOwners")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_owners_contacts_contact_id");

                    b.Navigation("Account");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Crm.Data.Entities.Contacts.ContactAddress", b =>
                {
                    b.HasOne("Crm.Data.Entities.Contacts.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_addresses_contacts_contact_id");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Crm.Data.Entities.Contacts.ContactPhone", b =>
                {
                    b.HasOne("Crm.Data.Entities.Contacts.Contact", "Contact")
                        .WithMany("Phones")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_phones_contacts_contact_id");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Crm.Data.Entities.Accounts.Account", b =>
                {
                    b.Navigation("AccountOwners");

                    b.Navigation("Balance")
                        .IsRequired();
                });

            modelBuilder.Entity("Crm.Data.Entities.Contacts.Contact", b =>
                {
                    b.Navigation("AccountOwners");

                    b.Navigation("Addresses");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
